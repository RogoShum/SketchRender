#version 430

layout(local_size_x = 512) in;

uniform sampler2D Sampler0;
uniform sampler2D Sampler1;
uniform sampler2D Sampler2;
uniform sampler2D Sampler3;
uniform sampler2D Sampler4;
uniform sampler2D Sampler5;

uniform int sketch_culling_size;
uniform mat4 sketch_culling_view_mat;
uniform mat4 sketch_culling_proj_mat;
uniform vec3 sketch_culling_camera_pos;
uniform vec3 sketch_culling_camera_dir;
uniform vec3 sketch_frustum_pos;
uniform int sketch_render_distance;
uniform int sketch_level_section_range;
uniform int sketch_level_min_pos;
uniform int sketch_space_partition_size;
uniform float[24] sketch_culling_frustum;
uniform float[12] sketch_depth_size;

struct SectionMesh {
    int vertex_offset;
    int element_count;
};

struct SectionData {
    int mask;
    int visibility;
    SectionMesh[7] mesh;
};

layout(r8, binding = 0) uniform image2D outputVisibility;
layout(std430, binding = 1) readonly buffer SectionMeshBuffer {
    SectionData section_data[];
};

const float near = 0.05;
float far = 16.0;

vec4[6] getFrustumData() {
    return vec4[](
    vec4(sketch_culling_frustum[0], sketch_culling_frustum[1], sketch_culling_frustum[2], sketch_culling_frustum[3]),
    vec4(sketch_culling_frustum[4], sketch_culling_frustum[5], sketch_culling_frustum[6], sketch_culling_frustum[7]),
    vec4(sketch_culling_frustum[8], sketch_culling_frustum[9], sketch_culling_frustum[10], sketch_culling_frustum[11]),
    vec4(sketch_culling_frustum[12], sketch_culling_frustum[13], sketch_culling_frustum[14], sketch_culling_frustum[15]),
    vec4(sketch_culling_frustum[16], sketch_culling_frustum[17], sketch_culling_frustum[18], sketch_culling_frustum[19]),
    vec4(sketch_culling_frustum[20], sketch_culling_frustum[21], sketch_culling_frustum[22], sketch_culling_frustum[23])
    );
}

vec2[6] getDepthScreenSize() {
    return vec2[](
    vec2(sketch_depth_size[0], sketch_depth_size[1]),
    vec2(sketch_depth_size[2], sketch_depth_size[3]),
    vec2(sketch_depth_size[4], sketch_depth_size[5]),
    vec2(sketch_depth_size[6], sketch_depth_size[7]),
    vec2(sketch_depth_size[8], sketch_depth_size[9]),
    vec2(sketch_depth_size[10], sketch_depth_size[11])
    );
}

int getSampler(float xLength, float yLength) {
    vec2[6] DepthScreenSize = getDepthScreenSize();
    for (int i = 0; i < DepthScreenSize.length(); ++i) {
        float xStep = 3.0 / DepthScreenSize[i].x;
        float yStep = 3.0 / DepthScreenSize[i].y;
        if (xStep > xLength && yStep > yLength) {
            return i;
        }
    }
    return DepthScreenSize.length() - 1;
}

float LinearizeDepth(float depth) {
    float z = depth * 2.0 - 1.0;
    return (near * far) / (far + near - z * (far - near));
}

float calculateDistance(vec3 P, vec3 Q) {
    return pow(Q.x - P.x, 2) + pow(Q.y - P.y, 2) + pow(Q.z - P.z, 2);
}

vec3 worldToScreenSpace(vec3 pos) {
    vec4 cameraSpace = sketch_culling_proj_mat * sketch_culling_view_mat * vec4(pos, 1);
    vec3 ndc;

    float w = cameraSpace.w;
    if (w < 0.0) {
        ndc.xy = cameraSpace.xy / -w;
        ndc.z = -2;
    } else {
        ndc.xy = cameraSpace.xy / w;
        ndc.z = cameraSpace.z / w;
    }

    return (ndc + vec3(1.0)) * 0.5;
}

vec3 moveTowardsCamera(vec3 pos, float distance) {
    vec3 direction = normalize(pos - sketch_culling_camera_pos);
    vec3 newPos = pos - direction * distance;
    return newPos;
}

vec3 blockToChunk(vec3 blockPos) {
    vec3 chunkPos;
    chunkPos.x = floor(blockPos.x / 16.0);
    chunkPos.y = floor(blockPos.y / 16.0);
    chunkPos.z = floor(blockPos.z / 16.0);
    return chunkPos;
}

bool cubeInFrustum(float minX, float minY, float minZ, float maxX, float maxY, float maxZ) {
    vec4[6] frustum = getFrustumData();
    for (int i = 0; i < 6; ++i) {
        vec4 plane = frustum[i];
        if (!(dot(plane, vec4(minX, minY, minZ, 1.0)) > 0.0) &&
        !(dot(plane, vec4(maxX, minY, minZ, 1.0)) > 0.0) &&
        !(dot(plane, vec4(minX, maxY, minZ, 1.0)) > 0.0) &&
        !(dot(plane, vec4(maxX, maxY, minZ, 1.0)) > 0.0) &&
        !(dot(plane, vec4(minX, minY, maxZ, 1.0)) > 0.0) &&
        !(dot(plane, vec4(maxX, minY, maxZ, 1.0)) > 0.0) &&
        !(dot(plane, vec4(minX, maxY, maxZ, 1.0)) > 0.0) &&
        !(dot(plane, vec4(maxX, maxY, maxZ, 1.0)) > 0.0)) {
            return false;
        }
    }
    return true;
}

bool calculateCube(float minX, float minY, float minZ, float maxX, float maxY, float maxZ) {
    float f = minX - sketch_frustum_pos.x;
    float f1 = minY - sketch_frustum_pos.y;
    float f2 = minZ - sketch_frustum_pos.z;
    float f3 = maxX - sketch_frustum_pos.x;
    float f4 = maxY - sketch_frustum_pos.y;
    float f5 = maxZ - sketch_frustum_pos.z;
    return cubeInFrustum(f, f1, f2, f3, f4, f5);
}

bool isVisible(vec3 vec) {
    float minX = vec.x - 8;
    float minY = vec.y - 8;
    float minZ = vec.z - 8;
    float maxX = vec.x + 8;
    float maxY = vec.y + 8;
    float maxZ = vec.z + 8;
    return calculateCube(minX, minY, minZ, maxX, maxY, maxZ);
}

float getUVDepth(int idx, ivec2 uv) {
    if (idx == 0)
        return texelFetch(Sampler0, uv, 0).r;
    else if (idx == 1)
        return texelFetch(Sampler1, uv, 0).r;
    else if (idx == 2)
        return texelFetch(Sampler2, uv, 0).r;
    else if (idx == 3)
        return texelFetch(Sampler3, uv, 0).r;
    else if (idx == 4)
        return texelFetch(Sampler4, uv, 0).r;

    return texelFetch(Sampler5, uv, 0).r;
}

void main() {
    int globalIndex = int(gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x
    + gl_GlobalInvocationID.x);

    if(globalIndex >= sketch_space_partition_size * sketch_space_partition_size * sketch_level_section_range) {
        return;
    }

    ivec2 outputPos = ivec2(globalIndex % sketch_culling_size, globalIndex / sketch_culling_size);

    int chunkX = int(globalIndex) / (sketch_space_partition_size * sketch_level_section_range) - sketch_render_distance;
    int chunkZ = (int(globalIndex) / sketch_level_section_range) % sketch_space_partition_size - sketch_render_distance;
    int chunkY = int(globalIndex) % sketch_level_section_range + (sketch_level_min_pos / 16);
    vec3 chunkBasePos = vec3(chunkX, chunkY, chunkZ);

    vec3 chunkPos = vec3(chunkBasePos+blockToChunk(sketch_culling_camera_pos))*16;
    chunkPos = vec3(chunkPos.x + 8.0, chunkY*16 + 8.0, chunkPos.z + 8.0);

    if (!isVisible(chunkPos)) {
        imageStore(outputVisibility, outputPos, vec4(0.0, 0.0, 1.0, 1.0));
        return;
    }

    far = sketch_render_distance * 64.0;

    float sizeOffset = 8.0;
    vec3 aabb[8] = vec3[](
        chunkPos+vec3(-sizeOffset, -sizeOffset, -sizeOffset),
        chunkPos+vec3(sizeOffset, -sizeOffset, -sizeOffset),
        chunkPos+vec3(-sizeOffset, sizeOffset, -sizeOffset),
        chunkPos+vec3(sizeOffset, sizeOffset, -sizeOffset),
        chunkPos+vec3(-sizeOffset, -sizeOffset, sizeOffset),
        chunkPos+vec3(sizeOffset, -sizeOffset, sizeOffset),
        chunkPos+vec3(-sizeOffset, sizeOffset, sizeOffset),
        chunkPos+vec3(sizeOffset, sizeOffset, sizeOffset)
    );

    float maxX = 0.0;
    float maxY = 0.0;
    float minX = 1.0;
    float minY = 1.0;

    bool inside = false;
    bool intersect = false;
    float sectionDepth = 1.0;

    for (int i = 0; i < 8; ++i) {
        vec3 screenPos = worldToScreenSpace(aabb[i]);

        if (screenPos.x >= 0 && screenPos.x <= 1
        && screenPos.y >= 0 && screenPos.y <= 1
        && screenPos.z >= 0 && screenPos.z <= 1) {
            inside = true;
        } else {
            intersect = true;
        }

        maxX = max(screenPos.x, maxX);
        maxY = max(screenPos.y, maxY);
        minX = min(screenPos.x, minX);
        minY = min(screenPos.y, minY);

        sectionDepth = min(screenPos.z, sectionDepth);
    }

    float chunkCenterDepth = worldToScreenSpace(moveTowardsCamera(chunkPos, 12.0)).z;

    int idx = getSampler(maxX-minX, maxY-minY);
    vec2[6] DepthScreenSize = getDepthScreenSize();
    int depthX = int(DepthScreenSize[idx].x);
    int depthY = int(DepthScreenSize[idx].y);

    int coordMinX = max(int(floor(minX * depthX)), 0);
    int coordMaxX = min(int(ceil(maxX * depthX)), depthX - 1);
    int coordMinY = max(int(floor(minY * depthY)), 0);
    int coordMaxY = min(int(ceil(maxY * depthY)), depthY - 1);

    for (int x = coordMinX; x <= coordMaxX; x++) {
        for (int y = coordMinY; y <= coordMaxY; y++) {
            float pixelDepth = getUVDepth(idx, ivec2(x, y));
            if (sectionDepth < pixelDepth) {
                imageStore(outputVisibility, outputPos, vec4(1.0, 0.0, 0.0, 1.0));
                return;
            }
        }
    }

    imageStore(outputVisibility, outputPos, vec4(0.0, 0.0, 0.0, 1.0));
}