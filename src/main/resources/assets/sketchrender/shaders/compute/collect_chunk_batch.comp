#version 430

struct MeshCounter {
    int solidCount;
    int cutoutCount;
    int translucentCount;
};

layout(std430, binding = 0) readonly buffer SectionMesh {
    int sectionMesh[];
};

layout(std430, binding = 1) writeonly buffer OutputBuffer {
    int output_command[];
};

layout(std430, binding = 2) writeonly buffer CounterBuffer {
    MeshCounter counter[];
};

layout(std430, binding = 3) readonly buffer RegionBuffer {
    ivec4 region_pos[];
};

layout(std430, binding = 7) writeonly buffer ElementCount {
    int element_count;
};

uniform sampler2D sketch_culling_texture;
uniform int sketch_level_section_range;
uniform int sketch_render_distance;
uniform int sketch_space_partition_size;
uniform int sketch_culling_size;
uniform int sketch_check_culling;
uniform int sketch_cull_facing;
uniform int sketch_translucent_sort;
uniform ivec3 sketch_camera_offset;
uniform ivec3 sketch_camera_pos;

#define REGION_SIZE 256.0f

#define MODEL_UNASSIGNED 6
#define MODEL_NEG_Z 5
#define MODEL_NEG_Y 4
#define MODEL_NEG_X 3
#define MODEL_POS_Z 2
#define MODEL_POS_Y 1
#define MODEL_POS_X 0

layout(local_size_x = 3, local_size_y = 1, local_size_z = 1) in;

int _get_chunk_index(ivec3 chunk_offset) {
    return (chunk_offset.x + sketch_render_distance) * sketch_space_partition_size * sketch_level_section_range + (chunk_offset.z + sketch_render_distance) * sketch_level_section_range + chunk_offset.y;
}

ivec2 _get_culling_uv_from_index(ivec3 chunk_offset) {
    int screenIndex = _get_chunk_index(chunk_offset);

    int fragX = screenIndex % sketch_culling_size;
    int fragY = screenIndex / sketch_culling_size;

    return ivec2(fragX, fragY);
}

bool _is_chunk_culled(ivec3 chunk_offset) {
    bool cull = texelFetch(sketch_culling_texture, _get_culling_uv_from_index(chunk_offset), 0).r <= 0.001;
    if (sketch_check_culling > 0) {
        return !cull;
    }
    return cull;
}

int lessThan(int a, int b) {
    return int(uint(a - b) >> 31);
}

int greaterThan(int a, int b) {
    return int(uint(b - a) >> 31);
}

int getVisibleFaces(int originX, int originY, int originZ, int chunkX, int chunkY, int chunkZ) {
    int boundsMinX = chunkX << 4;
    int boundsMaxX = boundsMinX + 16;
    int boundsMinY = chunkY << 4;
    int boundsMaxY = boundsMinY + 16;
    int boundsMinZ = chunkZ << 4;
    int boundsMaxZ = boundsMinZ + 16;
    int planes = 1 << MODEL_UNASSIGNED;
    planes |= greaterThan(originX, boundsMinX - 3) << MODEL_POS_X;
    planes |= greaterThan(originY, boundsMinY - 3) << MODEL_POS_Y;
    planes |= greaterThan(originZ, boundsMinZ - 3) << MODEL_POS_Z;
    planes |= lessThan(originX, boundsMaxX + 3) << MODEL_NEG_X;
    planes |= lessThan(originY, boundsMaxY + 3) << MODEL_NEG_Y;
    planes |= lessThan(originZ, boundsMaxZ + 3) << MODEL_NEG_Z;
    return planes;
}

int unpackX(int idx) {
    return idx >> 5 & 7;
}

int unpackY(int idx) {
    return idx >> 0 & 3;
}

int unpackZ(int idx) {
    return idx >> 2 & 7;
}

void main() {
    int outputIndex = int(gl_WorkGroupID.y);
    int posIndexOffset = outputIndex;
    ivec4 regionQueue = region_pos[posIndexOffset];
    int regionIndex = regionQueue.w;
    ivec3 regionPos = regionQueue.xyz;

    int sectionIndex = int(gl_WorkGroupID.x);
    ivec3 sectionPos = ivec3(
    unpackX(sectionIndex) + (regionPos.x),
    unpackY(sectionIndex) + (regionPos.y),
    unpackZ(sectionIndex) + (regionPos.z));

    ivec3 offset_chunk = ivec3(sectionPos.x - sketch_camera_offset.x, sectionPos.y - sketch_camera_offset.y, sectionPos.z - sketch_camera_offset.z);

    if (!_is_chunk_culled(offset_chunk)) {
        int passIndex = int(gl_LocalInvocationID.x);

        int meshOffset = (regionIndex * 256 * 16 * 3) + (256 * 16 * passIndex) + sectionIndex * 16;
        int slices;

        if (sketch_cull_facing <= 0 || (sketch_translucent_sort > 1 && passIndex == 2)) {
            slices = 127;
        } else {
            slices = getVisibleFaces(sketch_camera_pos.x, sketch_camera_pos.y, sketch_camera_pos.z, sectionPos.x, sectionPos.y, sectionPos.z);
        }

        slices &= sectionMesh[meshOffset];

        if (slices != 0) {
            int drawCount = 0;
            int[14] drawVertex;
            int maxElementCount = 0;

            for (int facing = 0; facing < 7; ++facing) {
                int chunkOffset = facing * 2;
                int outOffset = drawCount * 2;

                int elementCount = sectionMesh[meshOffset + 3 + chunkOffset];
                maxElementCount += elementCount;
                drawVertex[outOffset] = elementCount;
                drawVertex[outOffset + 1] = sectionMesh[meshOffset + 2 + chunkOffset];
                drawCount += slices >> facing & 1;
            }

            int currentCounter = 0;

            if (passIndex == 0) {
                currentCounter = atomicAdd(counter[outputIndex].solidCount, drawCount);
            } else if (passIndex == 1) {
                currentCounter = atomicAdd(counter[outputIndex].cutoutCount, drawCount);
            } else {
                currentCounter = atomicAdd(counter[outputIndex].translucentCount, drawCount);
            }

            atomicMax(element_count, maxElementCount);
            memoryBarrierAtomicCounter();

            int outputOffset = (256 * 16 * 3 * outputIndex) + (256 * 16 * passIndex) + currentCounter * 5;

            for (int i = 0; i < drawCount; ++i) {
                int offset = i * 5;
                output_command[outputOffset + offset] = drawVertex[i * 2];
                output_command[outputOffset + offset + 1] = 1;
                output_command[outputOffset + offset + 2] = 0;
                output_command[outputOffset + offset + 3] = drawVertex[i * 2 + 1];
                output_command[outputOffset + offset + 4] = 0;
            }
        }
    }
}