#version 430

struct DrawCommand {
    int element_count;
    int instance_count;
    int first_index;
    int vertex_offset;
    int instance_offset;
};

struct SectionMesh {
    int vertex_offset;
    int element_count;
};

struct SectionData {
    int mask;
    int visibility;
    SectionMesh[7] mesh;
};

struct MeshCounter {
    int solidCount;
    int cutoutCount;
    int translucentCount;
};

struct RegionPos {
    ivec3 pos;
    int index;
};

layout(std430, binding = 0) readonly buffer SectionMeshBuffer {
    SectionData section_data[];
};

layout(std430, binding = 1) writeonly buffer DrawCommandBuffer {
    DrawCommand draw_command[];
};

layout(std430, binding = 2) writeonly buffer CounterBuffer {
    MeshCounter counter[];
};

layout(std430, binding = 3) readonly buffer RegionPosBuffer {
    RegionPos region_pos[];
};

layout(std430, binding = 7) writeonly buffer ElementCountBuffer {
    int element_count;
};

uniform sampler2D sketch_culling_texture;
uniform int sketch_level_section_range;
uniform int sketch_render_distance;
uniform int sketch_space_partition_size;
uniform int sketch_culling_size;
uniform int sketch_check_culling;
uniform int sketch_cull_facing;
uniform int sketch_translucent_sort;
uniform ivec3 sketch_camera_offset;
uniform ivec3 sketch_camera_pos;

#define REGION_SIZE 256
#define LAYER_COUNT 3
#define FACE_COUNT 7

#define REGION_OFFSET REGION_SIZE * LAYER_COUNT
#define LAYER_OFFSET REGION_SIZE

#define MODEL_UNASSIGNED 6
#define MODEL_NEG_Z 5
#define MODEL_NEG_Y 4
#define MODEL_NEG_X 3
#define MODEL_POS_Z 2
#define MODEL_POS_Y 1
#define MODEL_POS_X 0

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

int _get_chunk_index(ivec3 chunk_offset) {
    return (chunk_offset.x + sketch_render_distance) * sketch_space_partition_size * sketch_level_section_range + (chunk_offset.z + sketch_render_distance) * sketch_level_section_range + chunk_offset.y;
}

ivec2 _get_culling_uv_from_index(ivec3 chunk_offset) {
    int screenIndex = _get_chunk_index(chunk_offset);

    int fragX = screenIndex % sketch_culling_size;
    int fragY = screenIndex / sketch_culling_size;

    return ivec2(fragX, fragY);
}

bool _is_chunk_culled(ivec3 chunk_offset) {
    bool cull = texelFetch(sketch_culling_texture, _get_culling_uv_from_index(chunk_offset), 0).r <= 0.001;
    if (sketch_check_culling > 0) {
        return !cull;
    }
    return cull;
}

int lessThan(int a, int b) {
    return int(uint(a - b) >> 31);
}

int greaterThan(int a, int b) {
    return int(uint(b - a) >> 31);
}

int getVisibleFaces(int originX, int originY, int originZ, int chunkX, int chunkY, int chunkZ) {
    int boundsMinX = chunkX << 4;
    int boundsMaxX = boundsMinX + 16;
    int boundsMinY = chunkY << 4;
    int boundsMaxY = boundsMinY + 16;
    int boundsMinZ = chunkZ << 4;
    int boundsMaxZ = boundsMinZ + 16;
    int planes = 1 << MODEL_UNASSIGNED;
    planes |= greaterThan(originX, boundsMinX - 3) << MODEL_POS_X;
    planes |= greaterThan(originY, boundsMinY - 3) << MODEL_POS_Y;
    planes |= greaterThan(originZ, boundsMinZ - 3) << MODEL_POS_Z;
    planes |= lessThan(originX, boundsMaxX + 3) << MODEL_NEG_X;
    planes |= lessThan(originY, boundsMaxY + 3) << MODEL_NEG_Y;
    planes |= lessThan(originZ, boundsMaxZ + 3) << MODEL_NEG_Z;
    return planes;
}

int unpackX(int idx) {
    return idx >> 5 & 7;
}

int unpackY(int idx) {
    return idx >> 0 & 3;
}

int unpackZ(int idx) {
    return idx >> 2 & 7;
}

void main() {
    int xIndex = int(gl_LocalInvocationID.x) + 64 * int(gl_WorkGroupID.x);

    int outputIndex = int(gl_WorkGroupID.y);
    int posIndexOffset = outputIndex;
    RegionPos regionQueue = region_pos[posIndexOffset];
    int regionIndex = regionQueue.index;
    ivec3 regionPos = regionQueue.pos;

    int sectionIndex = xIndex / 3;
    ivec3 sectionPos = ivec3(
    unpackX(sectionIndex) + (regionPos.x),
    unpackY(sectionIndex) + (regionPos.y),
    unpackZ(sectionIndex) + (regionPos.z));

    ivec3 offset_chunk = ivec3(sectionPos.x - sketch_camera_offset.x, sectionPos.y - sketch_camera_offset.y, sectionPos.z - sketch_camera_offset.z);

    if (!_is_chunk_culled(offset_chunk)) {
        int passIndex = xIndex % 3;
        int meshOffset = (REGION_OFFSET * regionIndex) + (LAYER_OFFSET * passIndex) + sectionIndex;
        int slices;
        SectionData sectionData = section_data[meshOffset];

        if (sketch_cull_facing <= 0 || (sketch_translucent_sort > 1 && passIndex == 2)) {
            slices = 127;
        } else {
            slices = getVisibleFaces(sketch_camera_pos.x, sketch_camera_pos.y, sketch_camera_pos.z, sectionPos.x, sectionPos.y, sectionPos.z);
        }

        slices &= sectionData.mask;

        if (slices != 0) {
            int drawCount = 0;
            SectionMesh[7] drawVertex;
            int maxElementCount = 0;

            for (int facing = 0; facing < FACE_COUNT; ++facing) {
                int elementCount = sectionData.mesh[facing].element_count;
                maxElementCount += elementCount;
                drawVertex[drawCount].element_count = elementCount;
                drawVertex[drawCount].vertex_offset = sectionData.mesh[facing].vertex_offset;
                drawCount += slices >> facing & 1;
            }

            int currentCounter = 0;

            if (passIndex == 0) {
                currentCounter = atomicAdd(counter[outputIndex].solidCount, drawCount);
            } else if (passIndex == 1) {
                currentCounter = atomicAdd(counter[outputIndex].cutoutCount, drawCount);
            } else {
                currentCounter = atomicAdd(counter[outputIndex].translucentCount, drawCount);
            }

            atomicMax(element_count, maxElementCount);
            memoryBarrierAtomicCounter();

            int outputOffset = (REGION_OFFSET * FACE_COUNT * outputIndex) + (LAYER_OFFSET * FACE_COUNT * passIndex) + currentCounter;

            for (int i = 0; i < drawCount; ++i) {
                int offset = i + outputOffset;
                draw_command[offset].element_count = drawVertex[i].element_count;
                draw_command[offset].instance_count = 1;
                draw_command[offset].first_index = 0;
                draw_command[offset].vertex_offset = drawVertex[i].vertex_offset;
                draw_command[offset].instance_offset = 0;
            }
        }
    }
}