#version 430

layout(std430, binding = 0) readonly buffer InputSSBO {
    int inputData[];
};

layout(std430, binding = 1) writeonly buffer OutputSSBO {
    int outputData[];
};

layout(std430, binding = 2) buffer CounterSSBO {
    int counter;
};

uniform sampler2D sketch_culling_texture;
uniform int sketch_level_section_range;
uniform int sketch_render_distance;
uniform int sketch_space_partition_size;
uniform int sketch_culling_size;
uniform int sketch_check_culling;
uniform ivec3 sketch_camera_offset;

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

int _get_chunk_index(ivec3 chunk_offset) {
    return (chunk_offset.x + sketch_render_distance) * sketch_space_partition_size * sketch_level_section_range + (chunk_offset.z + sketch_render_distance) * sketch_level_section_range + chunk_offset.y;
}

ivec2 _get_culling_uv_from_index(ivec3 chunk_offset) {
    int screenIndex = _get_chunk_index(chunk_offset);

    int fragX = screenIndex % sketch_culling_size;
    int fragY = screenIndex / sketch_culling_size;

    return ivec2(fragX, fragY);
}

bool _is_chunk_culled(ivec3 chunk_offset) {
    bool cull = texelFetch(sketch_culling_texture, _get_culling_uv_from_index(chunk_offset), 0).y <= 0.001;
    if (sketch_check_culling > 0) {
        return !cull;
    }
    return cull;
}

void main() {
    uint id = gl_GlobalInvocationID.x;
    int offset = int(id) * 5;

    int x = inputData[offset];
    int y = inputData[offset + 1];
    int z = inputData[offset + 2];

    ivec3 offset_chunk = ivec3(x - sketch_camera_offset.x, y - sketch_camera_offset.y, z - sketch_camera_offset.z);

    if (!_is_chunk_culled(offset_chunk)) {
        int elementCount = inputData[offset + 3];
        int vertexOffset = inputData[offset + 4];

        int currentCounter = atomicAdd(counter, 1);
        memoryBarrierBuffer();

        int outputOffset = currentCounter * 5;

        outputData[outputOffset] = elementCount;
        outputData[outputOffset + 1] = 1;
        outputData[outputOffset + 2] = 0;
        outputData[outputOffset + 3] = vertexOffset;
        outputData[outputOffset + 4] = 0;
    }
}