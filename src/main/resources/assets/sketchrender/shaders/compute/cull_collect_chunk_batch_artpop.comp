#version 430

struct DrawCommand {
    int element_count;
    int instance_count;
    int first_index;
    int vertex_offset;
    int instance_offset;
};

struct SectionMesh {
    int vertex_offset;
    int element_count;
};

struct SectionData {
    int mask;
    int visibility;
    SectionMesh[7] mesh;
};

struct MeshCounter {
    int solidCount;
    int cutoutCount;
    int translucentCount;
};

struct RegionPos {
    ivec3 pos;
    int index;
};

struct ClipResult {
    float minDepth;
    vec2 screenMin;
    vec2 screenMax;
};

layout(std430, binding = 0) readonly buffer SectionMeshBuffer {
    SectionData section_data[];
};

layout(std430, binding = 1) writeonly buffer DrawCommandBuffer {
    DrawCommand draw_command[];
};

layout(std430, binding = 2) writeonly buffer CounterBuffer {
    MeshCounter counter[];
};

layout(std430, binding = 3) readonly buffer RegionPosBuffer {
    RegionPos region_pos[];
};

layout(std430, binding = 7) writeonly buffer ElementCountBuffer {
    int element_count;
};

uniform int sketch_render_distance;
uniform int sketch_check_culling;
uniform int sketch_cull_facing;
uniform int sketch_translucent_sort;
uniform ivec3 sketch_camera_offset;
uniform ivec3 sketch_camera_pos;
uniform sampler2D Sampler0;
uniform sampler2D Sampler1;
uniform sampler2D Sampler2;
uniform sampler2D Sampler3;
uniform sampler2D Sampler4;
uniform sampler2D Sampler5;

uniform mat4 sketch_culling_view_mat;
uniform mat4 sketch_culling_proj_mat;
uniform vec3 sketch_culling_camera_pos;
uniform vec3 sketch_culling_camera_dir;
uniform vec3 sketch_frustum_pos;
uniform float[24] sketch_culling_frustum;
uniform float[12] sketch_depth_size;

#define REGION_SIZE 256
#define LAYER_COUNT 3
#define FACE_COUNT 7

#define REGION_OFFSET REGION_SIZE * LAYER_COUNT
#define LAYER_OFFSET REGION_SIZE

#define MODEL_UNASSIGNED 6
#define MODEL_NEG_Z 5
#define MODEL_NEG_Y 4
#define MODEL_NEG_X 3
#define MODEL_POS_Z 2
#define MODEL_POS_Y 1
#define MODEL_POS_X 0

const float near = 0.05;
float far = 16.0;

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

vec4[6] getFrustumData() {
    return vec4[](
    vec4(sketch_culling_frustum[0], sketch_culling_frustum[1], sketch_culling_frustum[2], sketch_culling_frustum[3]),
    vec4(sketch_culling_frustum[4], sketch_culling_frustum[5], sketch_culling_frustum[6], sketch_culling_frustum[7]),
    vec4(sketch_culling_frustum[8], sketch_culling_frustum[9], sketch_culling_frustum[10], sketch_culling_frustum[11]),
    vec4(sketch_culling_frustum[12], sketch_culling_frustum[13], sketch_culling_frustum[14], sketch_culling_frustum[15]),
    vec4(sketch_culling_frustum[16], sketch_culling_frustum[17], sketch_culling_frustum[18], sketch_culling_frustum[19]),
    vec4(sketch_culling_frustum[20], sketch_culling_frustum[21], sketch_culling_frustum[22], sketch_culling_frustum[23])
    );
}

vec2[6] getDepthScreenSize() {
    return vec2[](
    vec2(sketch_depth_size[0], sketch_depth_size[1]),
    vec2(sketch_depth_size[2], sketch_depth_size[3]),
    vec2(sketch_depth_size[4], sketch_depth_size[5]),
    vec2(sketch_depth_size[6], sketch_depth_size[7]),
    vec2(sketch_depth_size[8], sketch_depth_size[9]),
    vec2(sketch_depth_size[10], sketch_depth_size[11])
    );
}

int getSampler(float xLength, float yLength) {
    vec2[6] DepthScreenSize = getDepthScreenSize();
    for (int i = 0; i < DepthScreenSize.length(); ++i) {
        float xStep = 4.0 / DepthScreenSize[i].x;
        float yStep = 4.0 / DepthScreenSize[i].y;
        if (xStep > xLength && yStep > yLength) {
            return i;
        }
    }
    return DepthScreenSize.length() - 1;
}

float calculateDistance(vec3 P, vec3 Q) {
    return pow(Q.x - P.x, 2) + pow(Q.y - P.y, 2) + pow(Q.z - P.z, 2);
}

float LinearizeDepth(float depth) {
    float z = depth * 2.0 - 1.0;
    return (near * far) / (far + near - z * (far - near));
}

ClipResult getClippedMinDepth(vec3 center, float extent) {
    ClipResult result;
    result.minDepth = 1.0;
    result.screenMin = vec2(1.0);
    result.screenMax = vec2(0.0);

    mat4 mvp = sketch_culling_proj_mat * sketch_culling_view_mat;
    bool hasValidPoint = false;

    vec4 clipPositions[8];
    for(int i = 0; i < 8; i++) {
        vec3 vertex = center + vec3(
        (i & 1) == 0 ? -extent : extent,
        (i & 2) == 0 ? -extent : extent,
        (i & 4) == 0 ? -extent : extent
        );
        clipPositions[i] = mvp * vec4(vertex, 1.0);
    }

    for(int i = 0; i < 8; i++) {
        vec4 clipPos = clipPositions[i];
        vec2 ndcXY;

        if(clipPos.w > 0.0) {
            ndcXY = clipPos.xy / clipPos.w;
        } else {
            ndcXY = clipPos.xy / -clipPos.w;
        }

        vec2 screenPos = (ndcXY + 1.0) * 0.5;

        result.screenMin = min(result.screenMin, screenPos);
        result.screenMax = max(result.screenMax, screenPos);

        if (clipPos.w > 0.0) {
            result.minDepth = min(result.minDepth, clipPos.z / clipPos.w);
            hasValidPoint = true;
        } else {
            result.minDepth = -2.0;
            hasValidPoint = true;
        }
    }

    return result;
}

vec3 moveTowardsCamera(vec3 pos, float distance) {
    vec3 direction = normalize(pos - sketch_culling_camera_pos);
    vec3 newPos = pos - direction * distance;
    return newPos;
}

vec3 blockToChunk(vec3 blockPos) {
    vec3 chunkPos;
    chunkPos.x = floor(blockPos.x / 16.0);
    chunkPos.y = floor(blockPos.y / 16.0);
    chunkPos.z = floor(blockPos.z / 16.0);
    return chunkPos;
}

bool cubeInFrustum(float minX, float minY, float minZ, float maxX, float maxY, float maxZ) {
    vec4[6] frustum = getFrustumData();
    for (int i = 0; i < 6; ++i) {
        vec4 plane = frustum[i];
        if (!(dot(plane, vec4(minX, minY, minZ, 1.0)) > 0.0) &&
        !(dot(plane, vec4(maxX, minY, minZ, 1.0)) > 0.0) &&
        !(dot(plane, vec4(minX, maxY, minZ, 1.0)) > 0.0) &&
        !(dot(plane, vec4(maxX, maxY, minZ, 1.0)) > 0.0) &&
        !(dot(plane, vec4(minX, minY, maxZ, 1.0)) > 0.0) &&
        !(dot(plane, vec4(maxX, minY, maxZ, 1.0)) > 0.0) &&
        !(dot(plane, vec4(minX, maxY, maxZ, 1.0)) > 0.0) &&
        !(dot(plane, vec4(maxX, maxY, maxZ, 1.0)) > 0.0)) {
            return false;
        }
    }
    return true;
}

bool calculateCube(float minX, float minY, float minZ, float maxX, float maxY, float maxZ) {
    float f = minX - sketch_frustum_pos.x;
    float f1 = minY - sketch_frustum_pos.y;
    float f2 = minZ - sketch_frustum_pos.z;
    float f3 = maxX - sketch_frustum_pos.x;
    float f4 = maxY - sketch_frustum_pos.y;
    float f5 = maxZ - sketch_frustum_pos.z;
    return cubeInFrustum(f, f1, f2, f3, f4, f5);
}

bool isVisible(vec3 center) {
    vec3 min = center - vec3(8.0);
    vec3 max = center + vec3(8.0);
    vec3 corners[8] = vec3[](
    vec3(min.x, min.y, min.z),
    vec3(max.x, min.y, min.z),
    vec3(min.x, max.y, min.z),
    vec3(max.x, max.y, min.z),
    vec3(min.x, min.y, max.z),
    vec3(max.x, min.y, max.z),
    vec3(min.x, max.y, max.z),
    vec3(max.x, max.y, max.z)
    );
    vec4[6] frustum = getFrustumData();

    for(int i = 0; i < 6; i++) {
        bool inside = false;
        for(int j = 0; j < 8 && !inside; j++) {
            inside = dot(frustum[i], vec4(corners[j] - sketch_frustum_pos, 1.0)) > 0.0;
        }
        if(!inside) return false;
    }
    return true;
}

float getUVDepth(int idx, ivec2 uv) {
    if (idx == 0)
    return texelFetch(Sampler0, uv, 0).r;
    else if (idx == 1)
    return texelFetch(Sampler1, uv, 0).r;
    else if (idx == 2)
    return texelFetch(Sampler2, uv, 0).r;
    else if (idx == 3)
    return texelFetch(Sampler3, uv, 0).r;
    else if (idx == 4)
    return texelFetch(Sampler4, uv, 0).r;

    return texelFetch(Sampler5, uv, 0).r;
}

bool _is_chunk_culled(ivec3 sectionPos) {
    vec3 chunkPos = vec3(sectionPos) * 16;
    chunkPos = vec3(chunkPos.x + 8.0, chunkPos.y + 8.0, chunkPos.z + 8.0);

    if (!isVisible(chunkPos)) {
        return true;
    }

    far = sketch_render_distance * 64.0;

    ClipResult clip = getClippedMinDepth(chunkPos + (sketch_culling_camera_dir * -2), 9.0);

    float sectionDepth = (clip.minDepth + 1.0) * 0.5;
    sectionDepth = LinearizeDepth(sectionDepth);

    vec2 mins = clamp(clip.screenMin, 0.0, 1.0);
    vec2 maxs = clamp(clip.screenMax, 0.0, 1.0);

    int idx = getSampler(maxs.x - mins.x, maxs.y - mins.y);

    vec2[6] DepthScreenSize = getDepthScreenSize();
    int depthX = int(DepthScreenSize[idx].x);
    int depthY = int(DepthScreenSize[idx].y);

    int coordMinX = max(int(floor(mins.x * depthX)), 0);
    int coordMaxX = min(int(ceil(maxs.x * depthX)), depthX - 1);
    int coordMinY = max(int(floor(mins.y * depthY)), 0);
    int coordMaxY = min(int(ceil(maxs.y * depthY)), depthY - 1);

    for (int x = coordMinX; x <= coordMaxX; x++) {
        for (int y = coordMinY; y <= coordMaxY; y++) {
            float pixelDepth = getUVDepth(idx, ivec2(x, y));
            if (sectionDepth < pixelDepth) {
                return false;
            }
        }
    }

    return true;
}

int lessThan(int a, int b) {
    return int(uint(a - b) >> 31);
}

int greaterThan(int a, int b) {
    return int(uint(b - a) >> 31);
}

int getVisibleFaces(int originX, int originY, int originZ, int chunkX, int chunkY, int chunkZ) {
    int boundsMinX = chunkX << 4;
    int boundsMaxX = boundsMinX + 16;
    int boundsMinY = chunkY << 4;
    int boundsMaxY = boundsMinY + 16;
    int boundsMinZ = chunkZ << 4;
    int boundsMaxZ = boundsMinZ + 16;
    int planes = 1 << MODEL_UNASSIGNED;
    planes |= greaterThan(originX, boundsMinX - 3) << MODEL_POS_X;
    planes |= greaterThan(originY, boundsMinY - 3) << MODEL_POS_Y;
    planes |= greaterThan(originZ, boundsMinZ - 3) << MODEL_POS_Z;
    planes |= lessThan(originX, boundsMaxX + 3) << MODEL_NEG_X;
    planes |= lessThan(originY, boundsMaxY + 3) << MODEL_NEG_Y;
    planes |= lessThan(originZ, boundsMaxZ + 3) << MODEL_NEG_Z;
    return planes;
}

int unpackX(int idx) {
    return idx >> 5 & 7;
}

int unpackY(int idx) {
    return idx >> 0 & 3;
}

int unpackZ(int idx) {
    return idx >> 2 & 7;
}

void main() {
    int xIndex = int(gl_LocalInvocationID.x) + 64 * int(gl_WorkGroupID.x);

    int outputIndex = int(gl_WorkGroupID.y);
    int posIndexOffset = outputIndex;
    RegionPos regionQueue = region_pos[posIndexOffset];
    int regionIndex = regionQueue.index;
    ivec3 regionPos = regionQueue.pos;

    int sectionIndex = xIndex / 3;
    ivec3 sectionPos = ivec3(
    unpackX(sectionIndex) + (regionPos.x),
    unpackY(sectionIndex) + (regionPos.y),
    unpackZ(sectionIndex) + (regionPos.z));

    ivec3 offset_chunk = ivec3(sectionPos.x - sketch_camera_offset.x, sectionPos.y - sketch_camera_offset.y, sectionPos.z - sketch_camera_offset.z);
    bool culled = _is_chunk_culled(sectionPos);
    if (sketch_check_culling > 0) {
        culled = !culled;
    }

    if (!culled) {
        int passIndex = xIndex % 3;
        int meshOffset = (REGION_OFFSET * regionIndex) + (LAYER_OFFSET * passIndex) + sectionIndex;
        int slices;
        SectionData sectionData = section_data[meshOffset];

        if (sketch_cull_facing <= 0 || (sketch_translucent_sort > 0 && passIndex == 2)) {
            slices = 127;
        } else {
            slices = getVisibleFaces(sketch_camera_pos.x, sketch_camera_pos.y, sketch_camera_pos.z, sectionPos.x, sectionPos.y, sectionPos.z);
        }

        slices &= sectionData.mask;

        if (slices != 0) {
            int drawCount = 0;
            SectionMesh[7] drawVertex;
            int maxElementCount = 0;

            for (int facing = 0; facing < FACE_COUNT; ++facing) {
                int elementCount = sectionData.mesh[facing].element_count;
                maxElementCount += elementCount;
                drawVertex[drawCount].element_count = elementCount;
                drawVertex[drawCount].vertex_offset = sectionData.mesh[facing].vertex_offset;
                drawCount += slices >> facing & 1;
            }

            int currentCounter = 0;

            if (passIndex == 0) {
                currentCounter = atomicAdd(counter[outputIndex].solidCount, drawCount);
            } else if (passIndex == 1) {
                currentCounter = atomicAdd(counter[outputIndex].cutoutCount, drawCount);
            } else {
                currentCounter = atomicAdd(counter[outputIndex].translucentCount, drawCount);
            }

            atomicMax(element_count, maxElementCount);
            memoryBarrierAtomicCounter();

            int outputOffset = (REGION_OFFSET * FACE_COUNT * outputIndex) + (LAYER_OFFSET * FACE_COUNT * passIndex) + currentCounter;

            for (int i = 0; i < drawCount; ++i) {
                int offset = i + outputOffset;
                draw_command[offset].element_count = drawVertex[i].element_count;
                draw_command[offset].instance_count = 1;
                draw_command[offset].first_index = 0;
                draw_command[offset].vertex_offset = drawVertex[i].vertex_offset;
                draw_command[offset].instance_offset = 0;
            }
        }
    }
}